generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum TicketPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum FreightBasis {
  FULL     // Frete Cheio
  TON      // Frete Tonelada
}

enum Incoterm {
  CIF
  FOB
}

enum FleetType {
  FROTA
  TERCEIRO
}

enum TollType {
  COM_PEDAGIO
  SEM_PEDAGIO
  CLIENTE_PAGA_PEDAGIO
}

model User {
  id           Int            @id @default(autoincrement())
  username     String         @unique
  passwordHash String
  role         Role           @default(USER)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt

  ticketsCreated Ticket[]     @relation("TicketsCreated")
  ticketsAssigned Ticket[]    @relation("TicketsAssigned")
  comments      Comment[]
  refreshTokens RefreshToken[]
}

model Ticket {
  id          Int            @id @default(autoincrement())
  ticketNumber String        @unique
  title       String
  description String
  status      TicketStatus   @default(OPEN)
  priority    TicketPriority @default(MEDIUM)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  // ================================
  // Novos campos para transporte
  // ================================
  originCity        String?
  originUF          String?       @db.VarChar(2)
  originIBGEId      Int?
  destinationCity   String?
  destinationUF     String?       @db.VarChar(2)
  destinationIBGEId Int?
  
  // Rota por estados (ex: "SP > PR > SC")
  route             String?

  freightBasis      FreightBasis  @default(FULL)
  incoterm          Incoterm      @default(CIF)
  paymentTerm       String?
  paymentType       String?
  cargoWeight       Decimal?      @db.Decimal(10,3)
  billingCompany    String?
  plateCavalo       String?
  plateCarreta1     String?
  plateCarreta2     String?
  plateCarreta3     String?
  fleetType         FleetType     @default(FROTA)
  thirdPartyPayment Decimal?      @db.Decimal(10,2)
  serviceTaker      String?
  
  // Novos campos para terceiros
  hasToll           TollType?     // Tipo de ped√°gio
  cteRepresentative String?       // Representante do CTE
  manifestRepresentative String?  // Representante do manifesto
  // ================================

  createdById Int
  createdBy   User           @relation("TicketsCreated", fields: [createdById], references: [id])

  assignedToId Int?
  assignedTo   User?         @relation("TicketsAssigned", fields: [assignedToId], references: [id])

  comments    Comment[]
}

model Comment {
  id        Int      @id @default(autoincrement())
  body      String
  createdAt DateTime @default(now())

  ticketId  Int
  ticket    Ticket   @relation(fields: [ticketId], references: [id])

  authorId  Int
  author    User     @relation(fields: [authorId], references: [id])
}

model RefreshToken {
  id        Int      @id @default(autoincrement())
  tokenHash String
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  expiresAt DateTime
  revokedAt DateTime?
  createdAt DateTime @default(now())

  @@index([userId])
  @@index([expiresAt])
}
